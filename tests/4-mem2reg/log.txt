==========./performance-cases/const-prop.cminus==========
globl function:main
%op0 = alloca i32
%op1 = alloca i32
%op2 = alloca i32
%op3 = alloca i32
%op4 = alloca i32
%op5 = alloca i32
%op6 = alloca i32
%op7 = call i32 @input()
store i32 %op7, i32* %op6
store i32 0, i32* %op0
store i32 0, i32* %op1
store i32 0, i32* %op5
br label %label8
%op9 = load i32, i32* %op0
%op10 = load i32, i32* %op6
%op11 = icmp slt i32 %op9, %op10
%op12 = zext i1 %op11 to i32
%op13 = icmp ne i32 %op12, 0
br i1 %op13, label %label14, label %label66
%op15 = fmul float 0x3ff3c0c200000000, 0x4016f06a20000000
%op16 = fmul float %op15, 0x4002aa9940000000
%op17 = fmul float %op16, 0x4011781d80000000
%op18 = fmul float %op17, 0x401962ac40000000
%op19 = fptosi float %op18 to i32
store i32 %op19, i32* %op1
%op20 = load i32, i32* %op1
%op21 = load i32, i32* %op1
%op22 = mul i32 %op20, %op21
%op23 = load i32, i32* %op1
%op24 = mul i32 %op22, %op23
%op25 = load i32, i32* %op1
%op26 = mul i32 %op24, %op25
%op27 = load i32, i32* %op1
%op28 = mul i32 %op26, %op27
%op29 = load i32, i32* %op1
%op30 = mul i32 %op28, %op29
store i32 %op30, i32* %op2
%op31 = load i32, i32* %op2
%op32 = load i32, i32* %op2
%op33 = mul i32 %op31, %op32
%op34 = load i32, i32* %op2
%op35 = mul i32 %op33, %op34
%op36 = load i32, i32* %op2
%op37 = mul i32 %op35, %op36
%op38 = load i32, i32* %op2
%op39 = mul i32 %op37, %op38
%op40 = load i32, i32* %op2
%op41 = mul i32 %op39, %op40
store i32 %op41, i32* %op3
%op42 = load i32, i32* %op3
%op43 = load i32, i32* %op3
%op44 = mul i32 %op42, %op43
%op45 = load i32, i32* %op3
%op46 = mul i32 %op44, %op45
%op47 = load i32, i32* %op3
%op48 = mul i32 %op46, %op47
%op49 = load i32, i32* %op3
%op50 = mul i32 %op48, %op49
%op51 = load i32, i32* %op3
%op52 = mul i32 %op50, %op51
store i32 %op52, i32* %op4
%op53 = load i32, i32* %op4
%op54 = load i32, i32* %op4
%op55 = mul i32 %op53, %op54
%op56 = load i32, i32* %op4
%op57 = mul i32 %op55, %op56
%op58 = load i32, i32* %op4
%op59 = mul i32 %op57, %op58
%op60 = load i32, i32* %op4
%op61 = mul i32 %op59, %op60
%op62 = load i32, i32* %op4
%op63 = mul i32 %op61, %op62
store i32 %op63, i32* %op5
%op64 = load i32, i32* %op0
%op65 = add i32 %op64, 1
store i32 %op65, i32* %op0
br label %label8
%op67 = load i32, i32* %op5
call void @output(i32 %op67)
ret void
globl function:main
%op7 = call i32 @input()
br label %label8
%op68 = phi i32 [ 0, %label_entry ], [ %op65, %label14 ]
%op69 = phi i32 [ 0, %label_entry ], [ %op63, %label14 ]
%op11 = icmp slt i32 %op68, %op7
%op12 = zext i1 %op11 to i32
%op13 = icmp ne i32 %op12, 0
br i1 %op13, label %label14, label %label66
%op15 = fmul float 0x3ff3c0c200000000, 0x4016f06a20000000
%op16 = fmul float %op15, 0x4002aa9940000000
%op17 = fmul float %op16, 0x4011781d80000000
%op18 = fmul float %op17, 0x401962ac40000000
%op19 = fptosi float %op18 to i32
%op22 = mul i32 %op19, %op19
%op24 = mul i32 %op22, %op19
%op26 = mul i32 %op24, %op19
%op28 = mul i32 %op26, %op19
%op30 = mul i32 %op28, %op19
%op33 = mul i32 %op30, %op30
%op35 = mul i32 %op33, %op30
%op37 = mul i32 %op35, %op30
%op39 = mul i32 %op37, %op30
%op41 = mul i32 %op39, %op30
%op44 = mul i32 %op41, %op41
%op46 = mul i32 %op44, %op41
%op48 = mul i32 %op46, %op41
%op50 = mul i32 %op48, %op41
%op52 = mul i32 %op50, %op41
%op55 = mul i32 %op52, %op52
%op57 = mul i32 %op55, %op52
%op59 = mul i32 %op57, %op52
%op61 = mul i32 %op59, %op52
%op63 = mul i32 %op61, %op52
%op65 = add i32 %op68, 1
br label %label8
call void @output(i32 %op69)
ret void
==========./performance-cases/loop.cminus==========
globl function:main
%op0 = alloca i32
store i32 1, i32* %op0
br label %label1
%op2 = load i32, i32* %op0
%op3 = icmp slt i32 %op2, 999999999
%op4 = zext i1 %op3 to i32
%op5 = icmp ne i32 %op4, 0
br i1 %op5, label %label6, label %label9
%op7 = load i32, i32* %op0
%op8 = add i32 %op7, 1
store i32 %op8, i32* %op0
br label %label1
%op10 = load i32, i32* %op0
ret i32 %op10
globl function:main
br label %label1
%op11 = phi i32 [ 1, %label_entry ], [ %op8, %label6 ]
%op3 = icmp slt i32 %op11, 999999999
%op4 = zext i1 %op3 to i32
%op5 = icmp ne i32 %op4, 0
br i1 %op5, label %label6, label %label9
%op8 = add i32 %op11, 1
br label %label1
ret i32 %op11
==========./performance-cases/transpose.cminus==========
globl function:readarray
%op0 = alloca i32
store i32 0, i32* %op0
br label %label1
%op2 = load i32, i32* %op0
%op3 = load i32, i32* @len
%op4 = icmp slt i32 %op2, %op3
%op5 = zext i1 %op4 to i32
%op6 = icmp ne i32 %op5, 0
br i1 %op6, label %label7, label %label11
%op8 = call i32 @input()
%op9 = load i32, i32* %op0
%op10 = icmp slt i32 %op9, 0
br i1 %op10, label %label16, label %label12
ret void
%op13 = getelementptr [100000 x i32], [100000 x i32]* @ad, i32 0, i32 %op9
store i32 %op8, i32* %op13
%op14 = load i32, i32* %op0
%op15 = add i32 %op14, 1
store i32 %op15, i32* %op0
br label %label1
call void @neg_idx_except()
ret void
globl function:transpose
%op3 = alloca i32
store i32 %arg0, i32* %op3
%op4 = alloca i32*
store i32* %arg1, i32** %op4
%op5 = alloca i32
store i32 %arg2, i32* %op5
%op6 = alloca i32
%op7 = alloca i32
%op8 = alloca i32
%op9 = alloca i32
%op10 = load i32, i32* %op3
%op11 = load i32, i32* %op5
%op12 = sdiv i32 %op10, %op11
store i32 %op12, i32* %op6
store i32 0, i32* %op7
store i32 0, i32* %op8
br label %label13
%op14 = load i32, i32* %op7
%op15 = load i32, i32* %op6
%op16 = icmp slt i32 %op14, %op15
%op17 = zext i1 %op16 to i32
%op18 = icmp ne i32 %op17, 0
br i1 %op18, label %label19, label %label20
store i32 0, i32* %op8
br label %label22
%op21 = sub i32 0, 1
ret i32 %op21
%op23 = load i32, i32* %op8
%op24 = load i32, i32* %op5
%op25 = icmp slt i32 %op23, %op24
%op26 = zext i1 %op25 to i32
%op27 = icmp ne i32 %op26, 0
br i1 %op27, label %label28, label %label34
%op29 = load i32, i32* %op7
%op30 = load i32, i32* %op8
%op31 = icmp slt i32 %op29, %op30
%op32 = zext i1 %op31 to i32
%op33 = icmp ne i32 %op32, 0
br i1 %op33, label %label37, label %label40
%op35 = load i32, i32* %op7
%op36 = add i32 %op35, 1
store i32 %op36, i32* %op7
br label %label13
%op38 = load i32, i32* %op8
%op39 = add i32 %op38, 1
store i32 %op39, i32* %op8
br label %label47
%op41 = load i32, i32* %op7
%op42 = load i32, i32* %op5
%op43 = mul i32 %op41, %op42
%op44 = load i32, i32* %op8
%op45 = add i32 %op43, %op44
%op46 = icmp slt i32 %op45, 0
br i1 %op46, label %label58, label %label48
br label %label22
%op49 = load i32*, i32** %op4
%op50 = getelementptr i32, i32* %op49, i32 %op45
%op51 = load i32, i32* %op50
store i32 %op51, i32* %op9
%op52 = load i32, i32* %op7
%op53 = load i32, i32* %op5
%op54 = mul i32 %op52, %op53
%op55 = load i32, i32* %op8
%op56 = add i32 %op54, %op55
%op57 = icmp slt i32 %op56, 0
br i1 %op57, label %label69, label %label59
call void @neg_idx_except()
ret i32 0
%op60 = load i32*, i32** %op4
%op61 = getelementptr i32, i32* %op60, i32 %op56
%op62 = load i32, i32* %op61
%op63 = load i32, i32* %op8
%op64 = load i32, i32* %op6
%op65 = mul i32 %op63, %op64
%op66 = load i32, i32* %op7
%op67 = add i32 %op65, %op66
%op68 = icmp slt i32 %op67, 0
br i1 %op68, label %label80, label %label70
call void @neg_idx_except()
ret i32 0
%op71 = load i32*, i32** %op4
%op72 = getelementptr i32, i32* %op71, i32 %op67
store i32 %op62, i32* %op72
%op73 = load i32, i32* %op9
%op74 = load i32, i32* %op7
%op75 = load i32, i32* %op5
%op76 = mul i32 %op74, %op75
%op77 = load i32, i32* %op8
%op78 = add i32 %op76, %op77
%op79 = icmp slt i32 %op78, 0
br i1 %op79, label %label86, label %label81
call void @neg_idx_except()
ret i32 0
%op82 = load i32*, i32** %op4
%op83 = getelementptr i32, i32* %op82, i32 %op78
store i32 %op73, i32* %op83
%op84 = load i32, i32* %op8
%op85 = add i32 %op84, 1
store i32 %op85, i32* %op8
br label %label47
call void @neg_idx_except()
ret i32 0
globl function:main
%op0 = alloca i32
%op1 = alloca i32
%op2 = alloca i32
%op3 = call i32 @input()
store i32 %op3, i32* %op0
%op4 = call i32 @input()
store i32 %op4, i32* @len
call void @readarray()
store i32 0, i32* %op1
br label %label5
%op6 = load i32, i32* %op1
%op7 = load i32, i32* %op0
%op8 = icmp slt i32 %op6, %op7
%op9 = zext i1 %op8 to i32
%op10 = icmp ne i32 %op9, 0
br i1 %op10, label %label11, label %label15
%op12 = load i32, i32* %op1
%op13 = load i32, i32* %op1
%op14 = icmp slt i32 %op13, 0
br i1 %op14, label %label20, label %label16
store i32 0, i32* %op1
br label %label21
%op17 = getelementptr [20000000 x i32], [20000000 x i32]* @matrix, i32 0, i32 %op13
store i32 %op12, i32* %op17
%op18 = load i32, i32* %op1
%op19 = add i32 %op18, 1
store i32 %op19, i32* %op1
br label %label5
call void @neg_idx_except()
ret i32 0
%op22 = load i32, i32* %op1
%op23 = load i32, i32* @len
%op24 = icmp slt i32 %op22, %op23
%op25 = zext i1 %op24 to i32
%op26 = icmp ne i32 %op25, 0
br i1 %op26, label %label27, label %label32
%op28 = load i32, i32* %op0
%op29 = getelementptr [20000000 x i32], [20000000 x i32]* @matrix, i32 0, i32 0
%op30 = load i32, i32* %op1
%op31 = icmp slt i32 %op30, 0
br i1 %op31, label %label39, label %label33
store i32 0, i32* %op2
store i32 0, i32* %op1
br label %label40
%op34 = getelementptr [100000 x i32], [100000 x i32]* @ad, i32 0, i32 %op30
%op35 = load i32, i32* %op34
%op36 = call i32 @transpose(i32 %op28, i32* %op29, i32 %op35)
%op37 = load i32, i32* %op1
%op38 = add i32 %op37, 1
store i32 %op38, i32* %op1
br label %label21
call void @neg_idx_except()
ret i32 0
%op41 = load i32, i32* %op1
%op42 = load i32, i32* @len
%op43 = icmp slt i32 %op41, %op42
%op44 = zext i1 %op43 to i32
%op45 = icmp ne i32 %op44, 0
br i1 %op45, label %label46, label %label53
%op47 = load i32, i32* %op2
%op48 = load i32, i32* %op1
%op49 = load i32, i32* %op1
%op50 = mul i32 %op48, %op49
%op51 = load i32, i32* %op1
%op52 = icmp slt i32 %op51, 0
br i1 %op52, label %label65, label %label58
%op54 = load i32, i32* %op2
%op55 = icmp slt i32 %op54, 0
%op56 = zext i1 %op55 to i32
%op57 = icmp ne i32 %op56, 0
br i1 %op57, label %label66, label %label69
%op59 = getelementptr [20000000 x i32], [20000000 x i32]* @matrix, i32 0, i32 %op51
%op60 = load i32, i32* %op59
%op61 = mul i32 %op50, %op60
%op62 = add i32 %op47, %op61
store i32 %op62, i32* %op2
%op63 = load i32, i32* %op1
%op64 = add i32 %op63, 1
store i32 %op64, i32* %op1
br label %label40
call void @neg_idx_except()
ret i32 0
%op67 = load i32, i32* %op2
%op68 = sub i32 0, %op67
store i32 %op68, i32* %op2
br label %label69
%op70 = load i32, i32* %op2
call void @output(i32 %op70)
ret i32 0
globl function:readarray
br label %label1
%op17 = phi i32 [ 0, %label_entry ], [ %op15, %label12 ]
%op3 = load i32, i32* @len
%op4 = icmp slt i32 %op17, %op3
%op5 = zext i1 %op4 to i32
%op6 = icmp ne i32 %op5, 0
br i1 %op6, label %label7, label %label11
%op8 = call i32 @input()
%op10 = icmp slt i32 %op17, 0
br i1 %op10, label %label16, label %label12
ret void
%op13 = getelementptr [100000 x i32], [100000 x i32]* @ad, i32 0, i32 %op17
store i32 %op8, i32* %op13
%op15 = add i32 %op17, 1
br label %label1
call void @neg_idx_except()
ret void
globl function:transpose
%op12 = sdiv i32 %arg0, %arg2
br label %label13
%op87 = phi i32 [ 0, %label_entry ], [ %op36, %label34 ]
%op16 = icmp slt i32 %op87, %op12
%op17 = zext i1 %op16 to i32
%op18 = icmp ne i32 %op17, 0
br i1 %op18, label %label19, label %label20
br label %label22
%op21 = sub i32 0, 1
ret i32 %op21
%op88 = phi i32 [ 0, %label19 ], [ %op89, %label47 ]
%op25 = icmp slt i32 %op88, %arg2
%op26 = zext i1 %op25 to i32
%op27 = icmp ne i32 %op26, 0
br i1 %op27, label %label28, label %label34
%op31 = icmp slt i32 %op87, %op88
%op32 = zext i1 %op31 to i32
%op33 = icmp ne i32 %op32, 0
br i1 %op33, label %label37, label %label40
%op36 = add i32 %op87, 1
br label %label13
%op39 = add i32 %op88, 1
br label %label47
%op43 = mul i32 %op87, %arg2
%op45 = add i32 %op43, %op88
%op46 = icmp slt i32 %op45, 0
br i1 %op46, label %label58, label %label48
%op89 = phi i32 [ %op39, %label37 ], [ %op85, %label81 ]
br label %label22
%op50 = getelementptr i32, i32* %arg1, i32 %op45
%op51 = load i32, i32* %op50
%op54 = mul i32 %op87, %arg2
%op56 = add i32 %op54, %op88
%op57 = icmp slt i32 %op56, 0
br i1 %op57, label %label69, label %label59
call void @neg_idx_except()
ret i32 0
%op61 = getelementptr i32, i32* %arg1, i32 %op56
%op62 = load i32, i32* %op61
%op65 = mul i32 %op88, %op12
%op67 = add i32 %op65, %op87
%op68 = icmp slt i32 %op67, 0
br i1 %op68, label %label80, label %label70
call void @neg_idx_except()
ret i32 0
%op72 = getelementptr i32, i32* %arg1, i32 %op67
store i32 %op62, i32* %op72
%op76 = mul i32 %op87, %arg2
%op78 = add i32 %op76, %op88
%op79 = icmp slt i32 %op78, 0
br i1 %op79, label %label86, label %label81
call void @neg_idx_except()
ret i32 0
%op83 = getelementptr i32, i32* %arg1, i32 %op78
store i32 %op51, i32* %op83
%op85 = add i32 %op88, 1
br label %label47
call void @neg_idx_except()
ret i32 0
globl function:main
%op3 = call i32 @input()
%op4 = call i32 @input()
store i32 %op4, i32* @len
call void @readarray()
br label %label5
%op71 = phi i32 [ 0, %label_entry ], [ %op19, %label16 ]
%op8 = icmp slt i32 %op71, %op3
%op9 = zext i1 %op8 to i32
%op10 = icmp ne i32 %op9, 0
br i1 %op10, label %label11, label %label15
%op14 = icmp slt i32 %op71, 0
br i1 %op14, label %label20, label %label16
br label %label21
%op17 = getelementptr [20000000 x i32], [20000000 x i32]* @matrix, i32 0, i32 %op71
store i32 %op71, i32* %op17
%op19 = add i32 %op71, 1
br label %label5
call void @neg_idx_except()
ret i32 0
%op72 = phi i32 [ 0, %label15 ], [ %op38, %label33 ]
%op23 = load i32, i32* @len
%op24 = icmp slt i32 %op72, %op23
%op25 = zext i1 %op24 to i32
%op26 = icmp ne i32 %op25, 0
br i1 %op26, label %label27, label %label32
%op29 = getelementptr [20000000 x i32], [20000000 x i32]* @matrix, i32 0, i32 0
%op31 = icmp slt i32 %op72, 0
br i1 %op31, label %label39, label %label33
br label %label40
%op34 = getelementptr [100000 x i32], [100000 x i32]* @ad, i32 0, i32 %op72
%op35 = load i32, i32* %op34
%op36 = call i32 @transpose(i32 %op3, i32* %op29, i32 %op35)
%op38 = add i32 %op72, 1
br label %label21
call void @neg_idx_except()
ret i32 0
%op73 = phi i32 [ 0, %label32 ], [ %op64, %label58 ]
%op74 = phi i32 [ 0, %label32 ], [ %op62, %label58 ]
%op42 = load i32, i32* @len
%op43 = icmp slt i32 %op73, %op42
%op44 = zext i1 %op43 to i32
%op45 = icmp ne i32 %op44, 0
br i1 %op45, label %label46, label %label53
%op50 = mul i32 %op73, %op73
%op52 = icmp slt i32 %op73, 0
br i1 %op52, label %label65, label %label58
%op55 = icmp slt i32 %op74, 0
%op56 = zext i1 %op55 to i32
%op57 = icmp ne i32 %op56, 0
br i1 %op57, label %label66, label %label69
%op59 = getelementptr [20000000 x i32], [20000000 x i32]* @matrix, i32 0, i32 %op73
%op60 = load i32, i32* %op59
%op61 = mul i32 %op50, %op60
%op62 = add i32 %op74, %op61
%op64 = add i32 %op73, 1
br label %label40
call void @neg_idx_except()
ret i32 0
%op68 = sub i32 0, %op74
br label %label69
%op75 = phi i32 [ %op74, %label53 ], [ %op68, %label66 ]
call void @output(i32 %op75)
ret i32 0
